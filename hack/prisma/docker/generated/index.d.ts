// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  petition: (where?: PetitionWhereInput) => Promise<boolean>;
  resetPassword: (where?: ResetPasswordWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  petition: (where: PetitionWhereUniqueInput) => PetitionNullablePromise;
  petitions: (args?: {
    where?: PetitionWhereInput;
    orderBy?: PetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Petition>;
  petitionsConnection: (args?: {
    where?: PetitionWhereInput;
    orderBy?: PetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PetitionConnectionPromise;
  resetPassword: (
    where: ResetPasswordWhereUniqueInput
  ) => ResetPasswordNullablePromise;
  resetPasswords: (args?: {
    where?: ResetPasswordWhereInput;
    orderBy?: ResetPasswordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ResetPassword>;
  resetPasswordsConnection: (args?: {
    where?: ResetPasswordWhereInput;
    orderBy?: ResetPasswordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResetPasswordConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPetition: (data: PetitionCreateInput) => PetitionPromise;
  updatePetition: (args: {
    data: PetitionUpdateInput;
    where: PetitionWhereUniqueInput;
  }) => PetitionPromise;
  updateManyPetitions: (args: {
    data: PetitionUpdateManyMutationInput;
    where?: PetitionWhereInput;
  }) => BatchPayloadPromise;
  upsertPetition: (args: {
    where: PetitionWhereUniqueInput;
    create: PetitionCreateInput;
    update: PetitionUpdateInput;
  }) => PetitionPromise;
  deletePetition: (where: PetitionWhereUniqueInput) => PetitionPromise;
  deleteManyPetitions: (where?: PetitionWhereInput) => BatchPayloadPromise;
  createResetPassword: (data: ResetPasswordCreateInput) => ResetPasswordPromise;
  updateResetPassword: (args: {
    data: ResetPasswordUpdateInput;
    where: ResetPasswordWhereUniqueInput;
  }) => ResetPasswordPromise;
  updateManyResetPasswords: (args: {
    data: ResetPasswordUpdateManyMutationInput;
    where?: ResetPasswordWhereInput;
  }) => BatchPayloadPromise;
  upsertResetPassword: (args: {
    where: ResetPasswordWhereUniqueInput;
    create: ResetPasswordCreateInput;
    update: ResetPasswordUpdateInput;
  }) => ResetPasswordPromise;
  deleteResetPassword: (
    where: ResetPasswordWhereUniqueInput
  ) => ResetPasswordPromise;
  deleteManyResetPasswords: (
    where?: ResetPasswordWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  petition: (
    where?: PetitionSubscriptionWhereInput
  ) => PetitionSubscriptionPayloadSubscription;
  resetPassword: (
    where?: ResetPasswordSubscriptionWhereInput
  ) => ResetPasswordSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PetitionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserStatus = "VALIDATED" | "PENDING" | "INVALIDATE";

export type ResetPasswordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isExpired_ASC"
  | "isExpired_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "surname_ASC"
  | "surname_DESC"
  | "cpf_ASC"
  | "cpf_DESC"
  | "rg_ASC"
  | "rg_DESC"
  | "numeroCarteiraDeTrabalho_ASC"
  | "numeroCarteiraDeTrabalho_DESC"
  | "pis_ASC"
  | "pis_DESC"
  | "streetAddress_ASC"
  | "streetAddress_DESC"
  | "addressNumber_ASC"
  | "addressNumber_DESC"
  | "complement_ASC"
  | "complement_DESC"
  | "neighborhood_ASC"
  | "neighborhood_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "email_ASC"
  | "email_DESC"
  | "documentPhoto_ASC"
  | "documentPhoto_DESC"
  | "status_ASC"
  | "status_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ResetPasswordUpdateWithoutUserDataInput {
  isExpired?: Maybe<Boolean>;
}

export type PetitionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ResetPasswordUpdateManyWithWhereNestedInput {
  where: ResetPasswordScalarWhereInput;
  data: ResetPasswordUpdateManyDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  surname?: Maybe<String>;
  surname_not?: Maybe<String>;
  surname_in?: Maybe<String[] | String>;
  surname_not_in?: Maybe<String[] | String>;
  surname_lt?: Maybe<String>;
  surname_lte?: Maybe<String>;
  surname_gt?: Maybe<String>;
  surname_gte?: Maybe<String>;
  surname_contains?: Maybe<String>;
  surname_not_contains?: Maybe<String>;
  surname_starts_with?: Maybe<String>;
  surname_not_starts_with?: Maybe<String>;
  surname_ends_with?: Maybe<String>;
  surname_not_ends_with?: Maybe<String>;
  cpf?: Maybe<String>;
  cpf_not?: Maybe<String>;
  cpf_in?: Maybe<String[] | String>;
  cpf_not_in?: Maybe<String[] | String>;
  cpf_lt?: Maybe<String>;
  cpf_lte?: Maybe<String>;
  cpf_gt?: Maybe<String>;
  cpf_gte?: Maybe<String>;
  cpf_contains?: Maybe<String>;
  cpf_not_contains?: Maybe<String>;
  cpf_starts_with?: Maybe<String>;
  cpf_not_starts_with?: Maybe<String>;
  cpf_ends_with?: Maybe<String>;
  cpf_not_ends_with?: Maybe<String>;
  rg?: Maybe<String>;
  rg_not?: Maybe<String>;
  rg_in?: Maybe<String[] | String>;
  rg_not_in?: Maybe<String[] | String>;
  rg_lt?: Maybe<String>;
  rg_lte?: Maybe<String>;
  rg_gt?: Maybe<String>;
  rg_gte?: Maybe<String>;
  rg_contains?: Maybe<String>;
  rg_not_contains?: Maybe<String>;
  rg_starts_with?: Maybe<String>;
  rg_not_starts_with?: Maybe<String>;
  rg_ends_with?: Maybe<String>;
  rg_not_ends_with?: Maybe<String>;
  numeroCarteiraDeTrabalho?: Maybe<String>;
  numeroCarteiraDeTrabalho_not?: Maybe<String>;
  numeroCarteiraDeTrabalho_in?: Maybe<String[] | String>;
  numeroCarteiraDeTrabalho_not_in?: Maybe<String[] | String>;
  numeroCarteiraDeTrabalho_lt?: Maybe<String>;
  numeroCarteiraDeTrabalho_lte?: Maybe<String>;
  numeroCarteiraDeTrabalho_gt?: Maybe<String>;
  numeroCarteiraDeTrabalho_gte?: Maybe<String>;
  numeroCarteiraDeTrabalho_contains?: Maybe<String>;
  numeroCarteiraDeTrabalho_not_contains?: Maybe<String>;
  numeroCarteiraDeTrabalho_starts_with?: Maybe<String>;
  numeroCarteiraDeTrabalho_not_starts_with?: Maybe<String>;
  numeroCarteiraDeTrabalho_ends_with?: Maybe<String>;
  numeroCarteiraDeTrabalho_not_ends_with?: Maybe<String>;
  pis?: Maybe<String>;
  pis_not?: Maybe<String>;
  pis_in?: Maybe<String[] | String>;
  pis_not_in?: Maybe<String[] | String>;
  pis_lt?: Maybe<String>;
  pis_lte?: Maybe<String>;
  pis_gt?: Maybe<String>;
  pis_gte?: Maybe<String>;
  pis_contains?: Maybe<String>;
  pis_not_contains?: Maybe<String>;
  pis_starts_with?: Maybe<String>;
  pis_not_starts_with?: Maybe<String>;
  pis_ends_with?: Maybe<String>;
  pis_not_ends_with?: Maybe<String>;
  streetAddress?: Maybe<String>;
  streetAddress_not?: Maybe<String>;
  streetAddress_in?: Maybe<String[] | String>;
  streetAddress_not_in?: Maybe<String[] | String>;
  streetAddress_lt?: Maybe<String>;
  streetAddress_lte?: Maybe<String>;
  streetAddress_gt?: Maybe<String>;
  streetAddress_gte?: Maybe<String>;
  streetAddress_contains?: Maybe<String>;
  streetAddress_not_contains?: Maybe<String>;
  streetAddress_starts_with?: Maybe<String>;
  streetAddress_not_starts_with?: Maybe<String>;
  streetAddress_ends_with?: Maybe<String>;
  streetAddress_not_ends_with?: Maybe<String>;
  addressNumber?: Maybe<String>;
  addressNumber_not?: Maybe<String>;
  addressNumber_in?: Maybe<String[] | String>;
  addressNumber_not_in?: Maybe<String[] | String>;
  addressNumber_lt?: Maybe<String>;
  addressNumber_lte?: Maybe<String>;
  addressNumber_gt?: Maybe<String>;
  addressNumber_gte?: Maybe<String>;
  addressNumber_contains?: Maybe<String>;
  addressNumber_not_contains?: Maybe<String>;
  addressNumber_starts_with?: Maybe<String>;
  addressNumber_not_starts_with?: Maybe<String>;
  addressNumber_ends_with?: Maybe<String>;
  addressNumber_not_ends_with?: Maybe<String>;
  complement?: Maybe<String>;
  complement_not?: Maybe<String>;
  complement_in?: Maybe<String[] | String>;
  complement_not_in?: Maybe<String[] | String>;
  complement_lt?: Maybe<String>;
  complement_lte?: Maybe<String>;
  complement_gt?: Maybe<String>;
  complement_gte?: Maybe<String>;
  complement_contains?: Maybe<String>;
  complement_not_contains?: Maybe<String>;
  complement_starts_with?: Maybe<String>;
  complement_not_starts_with?: Maybe<String>;
  complement_ends_with?: Maybe<String>;
  complement_not_ends_with?: Maybe<String>;
  neighborhood?: Maybe<String>;
  neighborhood_not?: Maybe<String>;
  neighborhood_in?: Maybe<String[] | String>;
  neighborhood_not_in?: Maybe<String[] | String>;
  neighborhood_lt?: Maybe<String>;
  neighborhood_lte?: Maybe<String>;
  neighborhood_gt?: Maybe<String>;
  neighborhood_gte?: Maybe<String>;
  neighborhood_contains?: Maybe<String>;
  neighborhood_not_contains?: Maybe<String>;
  neighborhood_starts_with?: Maybe<String>;
  neighborhood_not_starts_with?: Maybe<String>;
  neighborhood_ends_with?: Maybe<String>;
  neighborhood_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  documentPhoto?: Maybe<String>;
  documentPhoto_not?: Maybe<String>;
  documentPhoto_in?: Maybe<String[] | String>;
  documentPhoto_not_in?: Maybe<String[] | String>;
  documentPhoto_lt?: Maybe<String>;
  documentPhoto_lte?: Maybe<String>;
  documentPhoto_gt?: Maybe<String>;
  documentPhoto_gte?: Maybe<String>;
  documentPhoto_contains?: Maybe<String>;
  documentPhoto_not_contains?: Maybe<String>;
  documentPhoto_starts_with?: Maybe<String>;
  documentPhoto_not_starts_with?: Maybe<String>;
  documentPhoto_ends_with?: Maybe<String>;
  documentPhoto_not_ends_with?: Maybe<String>;
  status?: Maybe<UserStatus>;
  status_not?: Maybe<UserStatus>;
  status_in?: Maybe<UserStatus[] | UserStatus>;
  status_not_in?: Maybe<UserStatus[] | UserStatus>;
  petitions_every?: Maybe<PetitionWhereInput>;
  petitions_some?: Maybe<PetitionWhereInput>;
  petitions_none?: Maybe<PetitionWhereInput>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  resetsPassword_every?: Maybe<ResetPasswordWhereInput>;
  resetsPassword_some?: Maybe<ResetPasswordWhereInput>;
  resetsPassword_none?: Maybe<ResetPasswordWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ResetPasswordCreateManyWithoutUserInput {
  create?: Maybe<
    ResetPasswordCreateWithoutUserInput[] | ResetPasswordCreateWithoutUserInput
  >;
  connect?: Maybe<
    ResetPasswordWhereUniqueInput[] | ResetPasswordWhereUniqueInput
  >;
}

export interface PetitionCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  questions?: Maybe<PetitionCreatequestionsInput>;
}

export interface ResetPasswordCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  isExpired: Boolean;
}

export interface ResetPasswordUpdateManyDataInput {
  isExpired?: Maybe<Boolean>;
}

export interface PetitionCreatequestionsInput {
  set?: Maybe<String[] | String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface PetitionUpdateInput {
  title?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutPetitionsInput>;
  questions?: Maybe<PetitionUpdatequestionsInput>;
}

export interface PetitionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PetitionWhereInput>;
  AND?: Maybe<
    PetitionSubscriptionWhereInput[] | PetitionSubscriptionWhereInput
  >;
  OR?: Maybe<PetitionSubscriptionWhereInput[] | PetitionSubscriptionWhereInput>;
  NOT?: Maybe<
    PetitionSubscriptionWhereInput[] | PetitionSubscriptionWhereInput
  >;
}

export interface UserUpdateOneRequiredWithoutPetitionsInput {
  create?: Maybe<UserCreateWithoutPetitionsInput>;
  update?: Maybe<UserUpdateWithoutPetitionsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPetitionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  surname?: Maybe<String>;
  cpf?: Maybe<String>;
  rg?: Maybe<String>;
  numeroCarteiraDeTrabalho?: Maybe<String>;
  pis?: Maybe<String>;
  streetAddress?: Maybe<String>;
  addressNumber?: Maybe<String>;
  complement?: Maybe<String>;
  neighborhood?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  email?: Maybe<String>;
  documentPhoto?: Maybe<String>;
  status?: Maybe<UserStatus>;
  petitions?: Maybe<PetitionUpdateManyWithoutUserInput>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  resetsPassword?: Maybe<ResetPasswordUpdateManyWithoutUserInput>;
}

export interface UserUpdateWithoutPetitionsDataInput {
  name?: Maybe<String>;
  surname?: Maybe<String>;
  cpf?: Maybe<String>;
  rg?: Maybe<String>;
  numeroCarteiraDeTrabalho?: Maybe<String>;
  pis?: Maybe<String>;
  streetAddress?: Maybe<String>;
  addressNumber?: Maybe<String>;
  complement?: Maybe<String>;
  neighborhood?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  email?: Maybe<String>;
  documentPhoto?: Maybe<String>;
  status?: Maybe<UserStatus>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  resetsPassword?: Maybe<ResetPasswordUpdateManyWithoutUserInput>;
}

export interface ResetPasswordUpdateManyMutationInput {
  isExpired?: Maybe<Boolean>;
}

export interface ResetPasswordUpdateManyWithoutUserInput {
  create?: Maybe<
    ResetPasswordCreateWithoutUserInput[] | ResetPasswordCreateWithoutUserInput
  >;
  delete?: Maybe<
    ResetPasswordWhereUniqueInput[] | ResetPasswordWhereUniqueInput
  >;
  connect?: Maybe<
    ResetPasswordWhereUniqueInput[] | ResetPasswordWhereUniqueInput
  >;
  set?: Maybe<ResetPasswordWhereUniqueInput[] | ResetPasswordWhereUniqueInput>;
  disconnect?: Maybe<
    ResetPasswordWhereUniqueInput[] | ResetPasswordWhereUniqueInput
  >;
  update?: Maybe<
    | ResetPasswordUpdateWithWhereUniqueWithoutUserInput[]
    | ResetPasswordUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ResetPasswordUpsertWithWhereUniqueWithoutUserInput[]
    | ResetPasswordUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    ResetPasswordScalarWhereInput[] | ResetPasswordScalarWhereInput
  >;
  updateMany?: Maybe<
    | ResetPasswordUpdateManyWithWhereNestedInput[]
    | ResetPasswordUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertWithoutResetsPasswordInput {
  update: UserUpdateWithoutResetsPasswordDataInput;
  create: UserCreateWithoutResetsPasswordInput;
}

export interface ResetPasswordUpdateWithWhereUniqueWithoutUserInput {
  where: ResetPasswordWhereUniqueInput;
  data: ResetPasswordUpdateWithoutUserDataInput;
}

export interface PetitionUpdateManyWithWhereNestedInput {
  where: PetitionScalarWhereInput;
  data: PetitionUpdateManyDataInput;
}

export interface PetitionUpdateManyWithoutUserInput {
  create?: Maybe<
    PetitionCreateWithoutUserInput[] | PetitionCreateWithoutUserInput
  >;
  delete?: Maybe<PetitionWhereUniqueInput[] | PetitionWhereUniqueInput>;
  connect?: Maybe<PetitionWhereUniqueInput[] | PetitionWhereUniqueInput>;
  set?: Maybe<PetitionWhereUniqueInput[] | PetitionWhereUniqueInput>;
  disconnect?: Maybe<PetitionWhereUniqueInput[] | PetitionWhereUniqueInput>;
  update?: Maybe<
    | PetitionUpdateWithWhereUniqueWithoutUserInput[]
    | PetitionUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PetitionUpsertWithWhereUniqueWithoutUserInput[]
    | PetitionUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PetitionScalarWhereInput[] | PetitionScalarWhereInput>;
  updateMany?: Maybe<
    | PetitionUpdateManyWithWhereNestedInput[]
    | PetitionUpdateManyWithWhereNestedInput
  >;
}

export interface PetitionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PetitionScalarWhereInput[] | PetitionScalarWhereInput>;
  OR?: Maybe<PetitionScalarWhereInput[] | PetitionScalarWhereInput>;
  NOT?: Maybe<PetitionScalarWhereInput[] | PetitionScalarWhereInput>;
}

export interface ResetPasswordUpsertWithWhereUniqueWithoutUserInput {
  where: ResetPasswordWhereUniqueInput;
  update: ResetPasswordUpdateWithoutUserDataInput;
  create: ResetPasswordCreateWithoutUserInput;
}

export interface PetitionUpdateWithoutUserDataInput {
  title?: Maybe<String>;
  questions?: Maybe<PetitionUpdatequestionsInput>;
}

export interface ResetPasswordScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  isExpired?: Maybe<Boolean>;
  isExpired_not?: Maybe<Boolean>;
  AND?: Maybe<ResetPasswordScalarWhereInput[] | ResetPasswordScalarWhereInput>;
  OR?: Maybe<ResetPasswordScalarWhereInput[] | ResetPasswordScalarWhereInput>;
  NOT?: Maybe<ResetPasswordScalarWhereInput[] | ResetPasswordScalarWhereInput>;
}

export interface UserCreateOneWithoutPetitionsInput {
  create?: Maybe<UserCreateWithoutPetitionsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ResetPasswordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  isExpired?: Maybe<Boolean>;
  isExpired_not?: Maybe<Boolean>;
  AND?: Maybe<ResetPasswordWhereInput[] | ResetPasswordWhereInput>;
  OR?: Maybe<ResetPasswordWhereInput[] | ResetPasswordWhereInput>;
  NOT?: Maybe<ResetPasswordWhereInput[] | ResetPasswordWhereInput>;
}

export interface PetitionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PetitionWhereInput[] | PetitionWhereInput>;
  OR?: Maybe<PetitionWhereInput[] | PetitionWhereInput>;
  NOT?: Maybe<PetitionWhereInput[] | PetitionWhereInput>;
}

export interface UserUpdateWithoutResetsPasswordDataInput {
  name?: Maybe<String>;
  surname?: Maybe<String>;
  cpf?: Maybe<String>;
  rg?: Maybe<String>;
  numeroCarteiraDeTrabalho?: Maybe<String>;
  pis?: Maybe<String>;
  streetAddress?: Maybe<String>;
  addressNumber?: Maybe<String>;
  complement?: Maybe<String>;
  neighborhood?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  email?: Maybe<String>;
  documentPhoto?: Maybe<String>;
  status?: Maybe<UserStatus>;
  petitions?: Maybe<PetitionUpdateManyWithoutUserInput>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  surname?: Maybe<String>;
  cpf?: Maybe<String>;
  rg?: Maybe<String>;
  numeroCarteiraDeTrabalho?: Maybe<String>;
  pis?: Maybe<String>;
  streetAddress?: Maybe<String>;
  addressNumber?: Maybe<String>;
  complement?: Maybe<String>;
  neighborhood?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  email?: Maybe<String>;
  documentPhoto?: Maybe<String>;
  status?: Maybe<UserStatus>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface UserUpsertWithoutPetitionsInput {
  update: UserUpdateWithoutPetitionsDataInput;
  create: UserCreateWithoutPetitionsInput;
}

export type ResetPasswordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PetitionUpdatequestionsInput {
  set?: Maybe<String[] | String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface PetitionUpdateManyMutationInput {
  title?: Maybe<String>;
  questions?: Maybe<PetitionUpdatequestionsInput>;
}

export interface PetitionUpdateWithWhereUniqueWithoutUserInput {
  where: PetitionWhereUniqueInput;
  data: PetitionUpdateWithoutUserDataInput;
}

export interface UserUpdateOneRequiredWithoutResetsPasswordInput {
  create?: Maybe<UserCreateWithoutResetsPasswordInput>;
  update?: Maybe<UserUpdateWithoutResetsPasswordDataInput>;
  upsert?: Maybe<UserUpsertWithoutResetsPasswordInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPetitionsInput {
  id?: Maybe<ID_Input>;
  name: String;
  surname: String;
  cpf?: Maybe<String>;
  rg?: Maybe<String>;
  numeroCarteiraDeTrabalho?: Maybe<String>;
  pis?: Maybe<String>;
  streetAddress?: Maybe<String>;
  addressNumber?: Maybe<String>;
  complement?: Maybe<String>;
  neighborhood?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  email: String;
  documentPhoto?: Maybe<String>;
  status?: Maybe<UserStatus>;
  password: String;
  phone?: Maybe<String>;
  resetsPassword?: Maybe<ResetPasswordCreateManyWithoutUserInput>;
}

export interface ResetPasswordUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutResetsPasswordInput>;
  isExpired?: Maybe<Boolean>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  surname: String;
  cpf?: Maybe<String>;
  rg?: Maybe<String>;
  numeroCarteiraDeTrabalho?: Maybe<String>;
  pis?: Maybe<String>;
  streetAddress?: Maybe<String>;
  addressNumber?: Maybe<String>;
  complement?: Maybe<String>;
  neighborhood?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  email: String;
  documentPhoto?: Maybe<String>;
  status?: Maybe<UserStatus>;
  petitions?: Maybe<PetitionCreateManyWithoutUserInput>;
  password: String;
  phone?: Maybe<String>;
  resetsPassword?: Maybe<ResetPasswordCreateManyWithoutUserInput>;
}

export interface PetitionCreateManyWithoutUserInput {
  create?: Maybe<
    PetitionCreateWithoutUserInput[] | PetitionCreateWithoutUserInput
  >;
  connect?: Maybe<PetitionWhereUniqueInput[] | PetitionWhereUniqueInput>;
}

export interface UserCreateWithoutResetsPasswordInput {
  id?: Maybe<ID_Input>;
  name: String;
  surname: String;
  cpf?: Maybe<String>;
  rg?: Maybe<String>;
  numeroCarteiraDeTrabalho?: Maybe<String>;
  pis?: Maybe<String>;
  streetAddress?: Maybe<String>;
  addressNumber?: Maybe<String>;
  complement?: Maybe<String>;
  neighborhood?: Maybe<String>;
  city?: Maybe<String>;
  state?: Maybe<String>;
  email: String;
  documentPhoto?: Maybe<String>;
  status?: Maybe<UserStatus>;
  petitions?: Maybe<PetitionCreateManyWithoutUserInput>;
  password: String;
  phone?: Maybe<String>;
}

export interface UserCreateOneWithoutResetsPasswordInput {
  create?: Maybe<UserCreateWithoutResetsPasswordInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ResetPasswordCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutResetsPasswordInput;
  isExpired: Boolean;
}

export interface PetitionUpdateManyDataInput {
  title?: Maybe<String>;
  questions?: Maybe<PetitionUpdatequestionsInput>;
}

export interface ResetPasswordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResetPasswordWhereInput>;
  AND?: Maybe<
    ResetPasswordSubscriptionWhereInput[] | ResetPasswordSubscriptionWhereInput
  >;
  OR?: Maybe<
    ResetPasswordSubscriptionWhereInput[] | ResetPasswordSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ResetPasswordSubscriptionWhereInput[] | ResetPasswordSubscriptionWhereInput
  >;
}

export interface PetitionCreateInput {
  id?: Maybe<ID_Input>;
  title?: Maybe<String>;
  user: UserCreateOneWithoutPetitionsInput;
  questions?: Maybe<PetitionCreatequestionsInput>;
}

export interface PetitionUpsertWithWhereUniqueWithoutUserInput {
  where: PetitionWhereUniqueInput;
  update: PetitionUpdateWithoutUserDataInput;
  create: PetitionCreateWithoutUserInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  surname: String;
  cpf?: String;
  rg?: String;
  numeroCarteiraDeTrabalho?: String;
  pis?: String;
  streetAddress?: String;
  addressNumber?: String;
  complement?: String;
  neighborhood?: String;
  city?: String;
  state?: String;
  email: String;
  documentPhoto?: String;
  status?: UserStatus;
  password: String;
  phone?: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  cpf: () => Promise<String>;
  rg: () => Promise<String>;
  numeroCarteiraDeTrabalho: () => Promise<String>;
  pis: () => Promise<String>;
  streetAddress: () => Promise<String>;
  addressNumber: () => Promise<String>;
  complement: () => Promise<String>;
  neighborhood: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  email: () => Promise<String>;
  documentPhoto: () => Promise<String>;
  status: () => Promise<UserStatus>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
  cpf: () => Promise<AsyncIterator<String>>;
  rg: () => Promise<AsyncIterator<String>>;
  numeroCarteiraDeTrabalho: () => Promise<AsyncIterator<String>>;
  pis: () => Promise<AsyncIterator<String>>;
  streetAddress: () => Promise<AsyncIterator<String>>;
  addressNumber: () => Promise<AsyncIterator<String>>;
  complement: () => Promise<AsyncIterator<String>>;
  neighborhood: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  documentPhoto: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<UserStatus>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ResetPasswordConnection {
  pageInfo: PageInfo;
  edges: ResetPasswordEdge[];
}

export interface ResetPasswordConnectionPromise
  extends Promise<ResetPasswordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResetPasswordEdge>>() => T;
  aggregate: <T = AggregateResetPasswordPromise>() => T;
}

export interface ResetPasswordConnectionSubscription
  extends Promise<AsyncIterator<ResetPasswordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResetPasswordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResetPasswordSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  surname: String;
  cpf?: String;
  rg?: String;
  numeroCarteiraDeTrabalho?: String;
  pis?: String;
  streetAddress?: String;
  addressNumber?: String;
  complement?: String;
  neighborhood?: String;
  city?: String;
  state?: String;
  email: String;
  documentPhoto?: String;
  status?: UserStatus;
  password: String;
  phone?: String;
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  cpf: () => Promise<String>;
  rg: () => Promise<String>;
  numeroCarteiraDeTrabalho: () => Promise<String>;
  pis: () => Promise<String>;
  streetAddress: () => Promise<String>;
  addressNumber: () => Promise<String>;
  complement: () => Promise<String>;
  neighborhood: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  email: () => Promise<String>;
  documentPhoto: () => Promise<String>;
  status: () => Promise<UserStatus>;
  petitions: <T = FragmentableArray<Petition>>(args?: {
    where?: PetitionWhereInput;
    orderBy?: PetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  resetsPassword: <T = FragmentableArray<ResetPassword>>(args?: {
    where?: ResetPasswordWhereInput;
    orderBy?: ResetPasswordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  surname: () => Promise<AsyncIterator<String>>;
  cpf: () => Promise<AsyncIterator<String>>;
  rg: () => Promise<AsyncIterator<String>>;
  numeroCarteiraDeTrabalho: () => Promise<AsyncIterator<String>>;
  pis: () => Promise<AsyncIterator<String>>;
  streetAddress: () => Promise<AsyncIterator<String>>;
  addressNumber: () => Promise<AsyncIterator<String>>;
  complement: () => Promise<AsyncIterator<String>>;
  neighborhood: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  documentPhoto: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<UserStatus>>;
  petitions: <T = Promise<AsyncIterator<PetitionSubscription>>>(args?: {
    where?: PetitionWhereInput;
    orderBy?: PetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  resetsPassword: <
    T = Promise<AsyncIterator<ResetPasswordSubscription>>
  >(args?: {
    where?: ResetPasswordWhereInput;
    orderBy?: ResetPasswordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  surname: () => Promise<String>;
  cpf: () => Promise<String>;
  rg: () => Promise<String>;
  numeroCarteiraDeTrabalho: () => Promise<String>;
  pis: () => Promise<String>;
  streetAddress: () => Promise<String>;
  addressNumber: () => Promise<String>;
  complement: () => Promise<String>;
  neighborhood: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  email: () => Promise<String>;
  documentPhoto: () => Promise<String>;
  status: () => Promise<UserStatus>;
  petitions: <T = FragmentableArray<Petition>>(args?: {
    where?: PetitionWhereInput;
    orderBy?: PetitionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  resetsPassword: <T = FragmentableArray<ResetPassword>>(args?: {
    where?: ResetPasswordWhereInput;
    orderBy?: ResetPasswordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregatePetition {
  count: Int;
}

export interface AggregatePetitionPromise
  extends Promise<AggregatePetition>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePetitionSubscription
  extends Promise<AsyncIterator<AggregatePetition>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PetitionEdge {
  node: Petition;
  cursor: String;
}

export interface PetitionEdgePromise
  extends Promise<PetitionEdge>,
    Fragmentable {
  node: <T = PetitionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PetitionEdgeSubscription
  extends Promise<AsyncIterator<PetitionEdge>>,
    Fragmentable {
  node: <T = PetitionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ResetPasswordPreviousValues {
  id: ID_Output;
  isExpired: Boolean;
}

export interface ResetPasswordPreviousValuesPromise
  extends Promise<ResetPasswordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isExpired: () => Promise<Boolean>;
}

export interface ResetPasswordPreviousValuesSubscription
  extends Promise<AsyncIterator<ResetPasswordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isExpired: () => Promise<AsyncIterator<Boolean>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PetitionConnection {
  pageInfo: PageInfo;
  edges: PetitionEdge[];
}

export interface PetitionConnectionPromise
  extends Promise<PetitionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PetitionEdge>>() => T;
  aggregate: <T = AggregatePetitionPromise>() => T;
}

export interface PetitionConnectionSubscription
  extends Promise<AsyncIterator<PetitionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PetitionEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePetitionSubscription>() => T;
}

export interface ResetPasswordSubscriptionPayload {
  mutation: MutationType;
  node: ResetPassword;
  updatedFields: String[];
  previousValues: ResetPasswordPreviousValues;
}

export interface ResetPasswordSubscriptionPayloadPromise
  extends Promise<ResetPasswordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResetPasswordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResetPasswordPreviousValuesPromise>() => T;
}

export interface ResetPasswordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResetPasswordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResetPasswordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResetPasswordPreviousValuesSubscription>() => T;
}

export interface ResetPasswordEdge {
  node: ResetPassword;
  cursor: String;
}

export interface ResetPasswordEdgePromise
  extends Promise<ResetPasswordEdge>,
    Fragmentable {
  node: <T = ResetPasswordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResetPasswordEdgeSubscription
  extends Promise<AsyncIterator<ResetPasswordEdge>>,
    Fragmentable {
  node: <T = ResetPasswordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PetitionPreviousValues {
  id: ID_Output;
  title?: String;
  questions: String[];
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface PetitionPreviousValuesPromise
  extends Promise<PetitionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  questions: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PetitionPreviousValuesSubscription
  extends Promise<AsyncIterator<PetitionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  questions: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PetitionSubscriptionPayload {
  mutation: MutationType;
  node: Petition;
  updatedFields: String[];
  previousValues: PetitionPreviousValues;
}

export interface PetitionSubscriptionPayloadPromise
  extends Promise<PetitionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PetitionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PetitionPreviousValuesPromise>() => T;
}

export interface PetitionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PetitionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PetitionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PetitionPreviousValuesSubscription>() => T;
}

export interface Petition {
  id: ID_Output;
  title?: String;
  questions: String[];
  createdAt?: DateTimeOutput;
  updatedAt?: DateTimeOutput;
}

export interface PetitionPromise extends Promise<Petition>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  user: <T = UserPromise>() => T;
  questions: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PetitionSubscription
  extends Promise<AsyncIterator<Petition>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  questions: () => Promise<AsyncIterator<String[]>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PetitionNullablePromise
  extends Promise<Petition | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  user: <T = UserPromise>() => T;
  questions: () => Promise<String[]>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ResetPassword {
  id: ID_Output;
  isExpired: Boolean;
}

export interface ResetPasswordPromise
  extends Promise<ResetPassword>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  isExpired: () => Promise<Boolean>;
}

export interface ResetPasswordSubscription
  extends Promise<AsyncIterator<ResetPassword>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  isExpired: () => Promise<AsyncIterator<Boolean>>;
}

export interface ResetPasswordNullablePromise
  extends Promise<ResetPassword | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  isExpired: () => Promise<Boolean>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateResetPassword {
  count: Int;
}

export interface AggregateResetPasswordPromise
  extends Promise<AggregateResetPassword>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResetPasswordSubscription
  extends Promise<AsyncIterator<AggregateResetPassword>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "UserStatus",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Petition",
    embedded: false
  },
  {
    name: "ResetPassword",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
