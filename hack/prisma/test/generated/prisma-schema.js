module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePetition {
  count: Int!
}

type AggregateResetPassword {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPetition(data: PetitionCreateInput!): Petition!
  updatePetition(data: PetitionUpdateInput!, where: PetitionWhereUniqueInput!): Petition
  updateManyPetitions(data: PetitionUpdateManyMutationInput!, where: PetitionWhereInput): BatchPayload!
  upsertPetition(where: PetitionWhereUniqueInput!, create: PetitionCreateInput!, update: PetitionUpdateInput!): Petition!
  deletePetition(where: PetitionWhereUniqueInput!): Petition
  deleteManyPetitions(where: PetitionWhereInput): BatchPayload!
  createResetPassword(data: ResetPasswordCreateInput!): ResetPassword!
  updateResetPassword(data: ResetPasswordUpdateInput!, where: ResetPasswordWhereUniqueInput!): ResetPassword
  updateManyResetPasswords(data: ResetPasswordUpdateManyMutationInput!, where: ResetPasswordWhereInput): BatchPayload!
  upsertResetPassword(where: ResetPasswordWhereUniqueInput!, create: ResetPasswordCreateInput!, update: ResetPasswordUpdateInput!): ResetPassword!
  deleteResetPassword(where: ResetPasswordWhereUniqueInput!): ResetPassword
  deleteManyResetPasswords(where: ResetPasswordWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Petition {
  id: ID!
  title: String
  user: User!
  questions: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PetitionConnection {
  pageInfo: PageInfo!
  edges: [PetitionEdge]!
  aggregate: AggregatePetition!
}

input PetitionCreateInput {
  id: ID
  title: String
  user: UserCreateOneWithoutPetitionsInput!
  questions: PetitionCreatequestionsInput
}

input PetitionCreateManyWithoutUserInput {
  create: [PetitionCreateWithoutUserInput!]
  connect: [PetitionWhereUniqueInput!]
}

input PetitionCreatequestionsInput {
  set: [String!]
}

input PetitionCreateWithoutUserInput {
  id: ID
  title: String
  questions: PetitionCreatequestionsInput
}

type PetitionEdge {
  node: Petition!
  cursor: String!
}

enum PetitionOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PetitionPreviousValues {
  id: ID!
  title: String
  questions: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PetitionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PetitionScalarWhereInput!]
  OR: [PetitionScalarWhereInput!]
  NOT: [PetitionScalarWhereInput!]
}

type PetitionSubscriptionPayload {
  mutation: MutationType!
  node: Petition
  updatedFields: [String!]
  previousValues: PetitionPreviousValues
}

input PetitionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PetitionWhereInput
  AND: [PetitionSubscriptionWhereInput!]
  OR: [PetitionSubscriptionWhereInput!]
  NOT: [PetitionSubscriptionWhereInput!]
}

input PetitionUpdateInput {
  title: String
  user: UserUpdateOneRequiredWithoutPetitionsInput
  questions: PetitionUpdatequestionsInput
}

input PetitionUpdateManyDataInput {
  title: String
  questions: PetitionUpdatequestionsInput
}

input PetitionUpdateManyMutationInput {
  title: String
  questions: PetitionUpdatequestionsInput
}

input PetitionUpdateManyWithoutUserInput {
  create: [PetitionCreateWithoutUserInput!]
  delete: [PetitionWhereUniqueInput!]
  connect: [PetitionWhereUniqueInput!]
  set: [PetitionWhereUniqueInput!]
  disconnect: [PetitionWhereUniqueInput!]
  update: [PetitionUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PetitionUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PetitionScalarWhereInput!]
  updateMany: [PetitionUpdateManyWithWhereNestedInput!]
}

input PetitionUpdateManyWithWhereNestedInput {
  where: PetitionScalarWhereInput!
  data: PetitionUpdateManyDataInput!
}

input PetitionUpdatequestionsInput {
  set: [String!]
}

input PetitionUpdateWithoutUserDataInput {
  title: String
  questions: PetitionUpdatequestionsInput
}

input PetitionUpdateWithWhereUniqueWithoutUserInput {
  where: PetitionWhereUniqueInput!
  data: PetitionUpdateWithoutUserDataInput!
}

input PetitionUpsertWithWhereUniqueWithoutUserInput {
  where: PetitionWhereUniqueInput!
  update: PetitionUpdateWithoutUserDataInput!
  create: PetitionCreateWithoutUserInput!
}

input PetitionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  user: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [PetitionWhereInput!]
  OR: [PetitionWhereInput!]
  NOT: [PetitionWhereInput!]
}

input PetitionWhereUniqueInput {
  id: ID
}

type Query {
  petition(where: PetitionWhereUniqueInput!): Petition
  petitions(where: PetitionWhereInput, orderBy: PetitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Petition]!
  petitionsConnection(where: PetitionWhereInput, orderBy: PetitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PetitionConnection!
  resetPassword(where: ResetPasswordWhereUniqueInput!): ResetPassword
  resetPasswords(where: ResetPasswordWhereInput, orderBy: ResetPasswordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResetPassword]!
  resetPasswordsConnection(where: ResetPasswordWhereInput, orderBy: ResetPasswordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResetPasswordConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type ResetPassword {
  id: ID!
  user: User!
  isExpired: Boolean!
}

type ResetPasswordConnection {
  pageInfo: PageInfo!
  edges: [ResetPasswordEdge]!
  aggregate: AggregateResetPassword!
}

input ResetPasswordCreateInput {
  id: ID
  user: UserCreateOneWithoutResetsPasswordInput!
  isExpired: Boolean!
}

input ResetPasswordCreateManyWithoutUserInput {
  create: [ResetPasswordCreateWithoutUserInput!]
  connect: [ResetPasswordWhereUniqueInput!]
}

input ResetPasswordCreateWithoutUserInput {
  id: ID
  isExpired: Boolean!
}

type ResetPasswordEdge {
  node: ResetPassword!
  cursor: String!
}

enum ResetPasswordOrderByInput {
  id_ASC
  id_DESC
  isExpired_ASC
  isExpired_DESC
}

type ResetPasswordPreviousValues {
  id: ID!
  isExpired: Boolean!
}

input ResetPasswordScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isExpired: Boolean
  isExpired_not: Boolean
  AND: [ResetPasswordScalarWhereInput!]
  OR: [ResetPasswordScalarWhereInput!]
  NOT: [ResetPasswordScalarWhereInput!]
}

type ResetPasswordSubscriptionPayload {
  mutation: MutationType!
  node: ResetPassword
  updatedFields: [String!]
  previousValues: ResetPasswordPreviousValues
}

input ResetPasswordSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResetPasswordWhereInput
  AND: [ResetPasswordSubscriptionWhereInput!]
  OR: [ResetPasswordSubscriptionWhereInput!]
  NOT: [ResetPasswordSubscriptionWhereInput!]
}

input ResetPasswordUpdateInput {
  user: UserUpdateOneRequiredWithoutResetsPasswordInput
  isExpired: Boolean
}

input ResetPasswordUpdateManyDataInput {
  isExpired: Boolean
}

input ResetPasswordUpdateManyMutationInput {
  isExpired: Boolean
}

input ResetPasswordUpdateManyWithoutUserInput {
  create: [ResetPasswordCreateWithoutUserInput!]
  delete: [ResetPasswordWhereUniqueInput!]
  connect: [ResetPasswordWhereUniqueInput!]
  set: [ResetPasswordWhereUniqueInput!]
  disconnect: [ResetPasswordWhereUniqueInput!]
  update: [ResetPasswordUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ResetPasswordUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ResetPasswordScalarWhereInput!]
  updateMany: [ResetPasswordUpdateManyWithWhereNestedInput!]
}

input ResetPasswordUpdateManyWithWhereNestedInput {
  where: ResetPasswordScalarWhereInput!
  data: ResetPasswordUpdateManyDataInput!
}

input ResetPasswordUpdateWithoutUserDataInput {
  isExpired: Boolean
}

input ResetPasswordUpdateWithWhereUniqueWithoutUserInput {
  where: ResetPasswordWhereUniqueInput!
  data: ResetPasswordUpdateWithoutUserDataInput!
}

input ResetPasswordUpsertWithWhereUniqueWithoutUserInput {
  where: ResetPasswordWhereUniqueInput!
  update: ResetPasswordUpdateWithoutUserDataInput!
  create: ResetPasswordCreateWithoutUserInput!
}

input ResetPasswordWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  isExpired: Boolean
  isExpired_not: Boolean
  AND: [ResetPasswordWhereInput!]
  OR: [ResetPasswordWhereInput!]
  NOT: [ResetPasswordWhereInput!]
}

input ResetPasswordWhereUniqueInput {
  id: ID
}

type Subscription {
  petition(where: PetitionSubscriptionWhereInput): PetitionSubscriptionPayload
  resetPassword(where: ResetPasswordSubscriptionWhereInput): ResetPasswordSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  surname: String!
  cpf: String
  rg: String
  numeroCarteiraDeTrabalho: String
  pis: String
  nomeDaMae: String
  dataDeNascimento: String
  streetAddress: String
  addressNumber: String
  complement: String
  neighborhood: String
  city: String
  state: String
  email: String!
  documentPhoto: String
  status: UserStatus
  petitions(where: PetitionWhereInput, orderBy: PetitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Petition!]
  password: String!
  phone: String
  resetsPassword(where: ResetPasswordWhereInput, orderBy: ResetPasswordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResetPassword!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  surname: String!
  cpf: String
  rg: String
  numeroCarteiraDeTrabalho: String
  pis: String
  nomeDaMae: String
  dataDeNascimento: String
  streetAddress: String
  addressNumber: String
  complement: String
  neighborhood: String
  city: String
  state: String
  email: String!
  documentPhoto: String
  status: UserStatus
  petitions: PetitionCreateManyWithoutUserInput
  password: String!
  phone: String
  resetsPassword: ResetPasswordCreateManyWithoutUserInput
}

input UserCreateOneWithoutPetitionsInput {
  create: UserCreateWithoutPetitionsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutResetsPasswordInput {
  create: UserCreateWithoutResetsPasswordInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPetitionsInput {
  id: ID
  name: String!
  surname: String!
  cpf: String
  rg: String
  numeroCarteiraDeTrabalho: String
  pis: String
  nomeDaMae: String
  dataDeNascimento: String
  streetAddress: String
  addressNumber: String
  complement: String
  neighborhood: String
  city: String
  state: String
  email: String!
  documentPhoto: String
  status: UserStatus
  password: String!
  phone: String
  resetsPassword: ResetPasswordCreateManyWithoutUserInput
}

input UserCreateWithoutResetsPasswordInput {
  id: ID
  name: String!
  surname: String!
  cpf: String
  rg: String
  numeroCarteiraDeTrabalho: String
  pis: String
  nomeDaMae: String
  dataDeNascimento: String
  streetAddress: String
  addressNumber: String
  complement: String
  neighborhood: String
  city: String
  state: String
  email: String!
  documentPhoto: String
  status: UserStatus
  petitions: PetitionCreateManyWithoutUserInput
  password: String!
  phone: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  surname_ASC
  surname_DESC
  cpf_ASC
  cpf_DESC
  rg_ASC
  rg_DESC
  numeroCarteiraDeTrabalho_ASC
  numeroCarteiraDeTrabalho_DESC
  pis_ASC
  pis_DESC
  nomeDaMae_ASC
  nomeDaMae_DESC
  dataDeNascimento_ASC
  dataDeNascimento_DESC
  streetAddress_ASC
  streetAddress_DESC
  addressNumber_ASC
  addressNumber_DESC
  complement_ASC
  complement_DESC
  neighborhood_ASC
  neighborhood_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  email_ASC
  email_DESC
  documentPhoto_ASC
  documentPhoto_DESC
  status_ASC
  status_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  surname: String!
  cpf: String
  rg: String
  numeroCarteiraDeTrabalho: String
  pis: String
  nomeDaMae: String
  dataDeNascimento: String
  streetAddress: String
  addressNumber: String
  complement: String
  neighborhood: String
  city: String
  state: String
  email: String!
  documentPhoto: String
  status: UserStatus
  password: String!
  phone: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum UserStatus {
  VALIDATED
  PENDING
  INVALIDATE
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  surname: String
  cpf: String
  rg: String
  numeroCarteiraDeTrabalho: String
  pis: String
  nomeDaMae: String
  dataDeNascimento: String
  streetAddress: String
  addressNumber: String
  complement: String
  neighborhood: String
  city: String
  state: String
  email: String
  documentPhoto: String
  status: UserStatus
  petitions: PetitionUpdateManyWithoutUserInput
  password: String
  phone: String
  resetsPassword: ResetPasswordUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  surname: String
  cpf: String
  rg: String
  numeroCarteiraDeTrabalho: String
  pis: String
  nomeDaMae: String
  dataDeNascimento: String
  streetAddress: String
  addressNumber: String
  complement: String
  neighborhood: String
  city: String
  state: String
  email: String
  documentPhoto: String
  status: UserStatus
  password: String
  phone: String
}

input UserUpdateOneRequiredWithoutPetitionsInput {
  create: UserCreateWithoutPetitionsInput
  update: UserUpdateWithoutPetitionsDataInput
  upsert: UserUpsertWithoutPetitionsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutResetsPasswordInput {
  create: UserCreateWithoutResetsPasswordInput
  update: UserUpdateWithoutResetsPasswordDataInput
  upsert: UserUpsertWithoutResetsPasswordInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPetitionsDataInput {
  name: String
  surname: String
  cpf: String
  rg: String
  numeroCarteiraDeTrabalho: String
  pis: String
  nomeDaMae: String
  dataDeNascimento: String
  streetAddress: String
  addressNumber: String
  complement: String
  neighborhood: String
  city: String
  state: String
  email: String
  documentPhoto: String
  status: UserStatus
  password: String
  phone: String
  resetsPassword: ResetPasswordUpdateManyWithoutUserInput
}

input UserUpdateWithoutResetsPasswordDataInput {
  name: String
  surname: String
  cpf: String
  rg: String
  numeroCarteiraDeTrabalho: String
  pis: String
  nomeDaMae: String
  dataDeNascimento: String
  streetAddress: String
  addressNumber: String
  complement: String
  neighborhood: String
  city: String
  state: String
  email: String
  documentPhoto: String
  status: UserStatus
  petitions: PetitionUpdateManyWithoutUserInput
  password: String
  phone: String
}

input UserUpsertWithoutPetitionsInput {
  update: UserUpdateWithoutPetitionsDataInput!
  create: UserCreateWithoutPetitionsInput!
}

input UserUpsertWithoutResetsPasswordInput {
  update: UserUpdateWithoutResetsPasswordDataInput!
  create: UserCreateWithoutResetsPasswordInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  surname: String
  surname_not: String
  surname_in: [String!]
  surname_not_in: [String!]
  surname_lt: String
  surname_lte: String
  surname_gt: String
  surname_gte: String
  surname_contains: String
  surname_not_contains: String
  surname_starts_with: String
  surname_not_starts_with: String
  surname_ends_with: String
  surname_not_ends_with: String
  cpf: String
  cpf_not: String
  cpf_in: [String!]
  cpf_not_in: [String!]
  cpf_lt: String
  cpf_lte: String
  cpf_gt: String
  cpf_gte: String
  cpf_contains: String
  cpf_not_contains: String
  cpf_starts_with: String
  cpf_not_starts_with: String
  cpf_ends_with: String
  cpf_not_ends_with: String
  rg: String
  rg_not: String
  rg_in: [String!]
  rg_not_in: [String!]
  rg_lt: String
  rg_lte: String
  rg_gt: String
  rg_gte: String
  rg_contains: String
  rg_not_contains: String
  rg_starts_with: String
  rg_not_starts_with: String
  rg_ends_with: String
  rg_not_ends_with: String
  numeroCarteiraDeTrabalho: String
  numeroCarteiraDeTrabalho_not: String
  numeroCarteiraDeTrabalho_in: [String!]
  numeroCarteiraDeTrabalho_not_in: [String!]
  numeroCarteiraDeTrabalho_lt: String
  numeroCarteiraDeTrabalho_lte: String
  numeroCarteiraDeTrabalho_gt: String
  numeroCarteiraDeTrabalho_gte: String
  numeroCarteiraDeTrabalho_contains: String
  numeroCarteiraDeTrabalho_not_contains: String
  numeroCarteiraDeTrabalho_starts_with: String
  numeroCarteiraDeTrabalho_not_starts_with: String
  numeroCarteiraDeTrabalho_ends_with: String
  numeroCarteiraDeTrabalho_not_ends_with: String
  pis: String
  pis_not: String
  pis_in: [String!]
  pis_not_in: [String!]
  pis_lt: String
  pis_lte: String
  pis_gt: String
  pis_gte: String
  pis_contains: String
  pis_not_contains: String
  pis_starts_with: String
  pis_not_starts_with: String
  pis_ends_with: String
  pis_not_ends_with: String
  nomeDaMae: String
  nomeDaMae_not: String
  nomeDaMae_in: [String!]
  nomeDaMae_not_in: [String!]
  nomeDaMae_lt: String
  nomeDaMae_lte: String
  nomeDaMae_gt: String
  nomeDaMae_gte: String
  nomeDaMae_contains: String
  nomeDaMae_not_contains: String
  nomeDaMae_starts_with: String
  nomeDaMae_not_starts_with: String
  nomeDaMae_ends_with: String
  nomeDaMae_not_ends_with: String
  dataDeNascimento: String
  dataDeNascimento_not: String
  dataDeNascimento_in: [String!]
  dataDeNascimento_not_in: [String!]
  dataDeNascimento_lt: String
  dataDeNascimento_lte: String
  dataDeNascimento_gt: String
  dataDeNascimento_gte: String
  dataDeNascimento_contains: String
  dataDeNascimento_not_contains: String
  dataDeNascimento_starts_with: String
  dataDeNascimento_not_starts_with: String
  dataDeNascimento_ends_with: String
  dataDeNascimento_not_ends_with: String
  streetAddress: String
  streetAddress_not: String
  streetAddress_in: [String!]
  streetAddress_not_in: [String!]
  streetAddress_lt: String
  streetAddress_lte: String
  streetAddress_gt: String
  streetAddress_gte: String
  streetAddress_contains: String
  streetAddress_not_contains: String
  streetAddress_starts_with: String
  streetAddress_not_starts_with: String
  streetAddress_ends_with: String
  streetAddress_not_ends_with: String
  addressNumber: String
  addressNumber_not: String
  addressNumber_in: [String!]
  addressNumber_not_in: [String!]
  addressNumber_lt: String
  addressNumber_lte: String
  addressNumber_gt: String
  addressNumber_gte: String
  addressNumber_contains: String
  addressNumber_not_contains: String
  addressNumber_starts_with: String
  addressNumber_not_starts_with: String
  addressNumber_ends_with: String
  addressNumber_not_ends_with: String
  complement: String
  complement_not: String
  complement_in: [String!]
  complement_not_in: [String!]
  complement_lt: String
  complement_lte: String
  complement_gt: String
  complement_gte: String
  complement_contains: String
  complement_not_contains: String
  complement_starts_with: String
  complement_not_starts_with: String
  complement_ends_with: String
  complement_not_ends_with: String
  neighborhood: String
  neighborhood_not: String
  neighborhood_in: [String!]
  neighborhood_not_in: [String!]
  neighborhood_lt: String
  neighborhood_lte: String
  neighborhood_gt: String
  neighborhood_gte: String
  neighborhood_contains: String
  neighborhood_not_contains: String
  neighborhood_starts_with: String
  neighborhood_not_starts_with: String
  neighborhood_ends_with: String
  neighborhood_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  state: String
  state_not: String
  state_in: [String!]
  state_not_in: [String!]
  state_lt: String
  state_lte: String
  state_gt: String
  state_gte: String
  state_contains: String
  state_not_contains: String
  state_starts_with: String
  state_not_starts_with: String
  state_ends_with: String
  state_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  documentPhoto: String
  documentPhoto_not: String
  documentPhoto_in: [String!]
  documentPhoto_not_in: [String!]
  documentPhoto_lt: String
  documentPhoto_lte: String
  documentPhoto_gt: String
  documentPhoto_gte: String
  documentPhoto_contains: String
  documentPhoto_not_contains: String
  documentPhoto_starts_with: String
  documentPhoto_not_starts_with: String
  documentPhoto_ends_with: String
  documentPhoto_not_ends_with: String
  status: UserStatus
  status_not: UserStatus
  status_in: [UserStatus!]
  status_not_in: [UserStatus!]
  petitions_every: PetitionWhereInput
  petitions_some: PetitionWhereInput
  petitions_none: PetitionWhereInput
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  resetsPassword_every: ResetPasswordWhereInput
  resetsPassword_some: ResetPasswordWhereInput
  resetsPassword_none: ResetPasswordWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    